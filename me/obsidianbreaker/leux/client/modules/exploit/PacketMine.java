package me.obsidianbreaker.leux.client.modules.exploit;

import give up;
import me.obsidianbreaker.leux.client.event.events.EventDamageBlock;
import me.obsidianbreaker.leux.client.event.events.EventRender;
import me.obsidianbreaker.leux.client.guiscreen.settings.Setting;
import me.obsidianbreaker.leux.client.modules.Category;
import me.obsidianbreaker.leux.client.modules.Module;
import me.obsidianbreaker.leux.client.turok.TurokTick;
import me.obsidianbreaker.leux.client.turok.draw.RenderHelp;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

public class PacketMine extends Module {
  @EventHandler
  public Listener on_damage_block = new Listener(this::lambda$new$0, new java.util.function.Predicate[0]);
  
  public TurokTick time = new TurokTick();
  
  public Setting render_mode = create("Render Mode", "Mode", "Both", combobox(new String[] { "Quads", "Lines", "Both" }));
  
  public BlockPos current_break;
  
  public Setting render_break = create("Render When Done", "Render", true);
  
  public PacketMine() {
    super(Category.exploit);
  }
  
  public void render(EventRender paramEventRender) {
    (give up)null;
    if (this.render_break.get_value(true))
      if (this.current_break != null) {
        if (this.time.isPassedMS(1500.0F)) {
          if (this.render_mode.in("Quads")) {
            RenderHelp.prepare("quads");
            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 0, 255, 0, 30, "all");
            RenderHelp.release();
          } else if (this.render_mode.in("Lines")) {
            RenderHelp.prepare("lines");
            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 0, 255, 0, 150, "all");
            RenderHelp.release();
          } else if (this.render_mode.in("Both")) {
            RenderHelp.prepare("quads");
            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 0, 255, 0, 30, "all");
            RenderHelp.release();
            RenderHelp.prepare("lines");
            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 0, 255, 0, 150, "all");
            RenderHelp.release();
          } 
        } else if (this.render_mode.in("Quads")) {
          RenderHelp.prepare("quads");
          RenderHelp.draw_cube(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 255, 0, 0, 30, "all");
          RenderHelp.release();
        } else if (this.render_mode.in("Lines")) {
          RenderHelp.prepare("lines");
          RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 255, 0, 0, 150, "all");
          RenderHelp.release();
        } else if (this.render_mode.in("Both")) {
          RenderHelp.prepare("quads");
          RenderHelp.draw_cube(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 255, 0, 0, 30, "all");
          RenderHelp.release();
          RenderHelp.prepare("lines");
          RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), this.current_break.func_177958_n(), this.current_break.func_177956_o(), this.current_break.func_177952_p(), 1.0F, 1.0F, 1.0F, 255, 0, 0, 150, "all");
          RenderHelp.release();
        } 
        if (mc.field_71441_e.func_180495_p(this.current_break).func_177230_c() == Blocks.field_150350_a)
          this.current_break = null; 
      } else {
        this.time.reset();
      }  
  }
  
  public void lambda$new$0(EventDamageBlock paramEventDamageBlock) {
    (give up)null;
    if (!can_break(paramEventDamageBlock.getPos())) {
      this.current_break = null;
      return;
    } 
    this.current_break = paramEventDamageBlock.getPos();
    mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
    mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, paramEventDamageBlock.getPos(), paramEventDamageBlock.getDirection()));
    mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, paramEventDamageBlock.getPos(), paramEventDamageBlock.getDirection()));
    paramEventDamageBlock.cancel();
  }
  
  public boolean can_break(BlockPos paramBlockPos) {
    (give up)null;
    IBlockState iBlockState = mc.field_71441_e.func_180495_p(paramBlockPos);
    Block block = iBlockState.func_177230_c();
    return (block.func_176195_g(iBlockState, (World)mc.field_71441_e, paramBlockPos) != -1.0F);
  }
}
